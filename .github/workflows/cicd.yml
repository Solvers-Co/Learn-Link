name: CI/CD para React e Spring Boot com Deploy em EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Build do Backend
    - name: Atualização do código
      uses: actions/checkout@v2

    - name: Definindo a versão da JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build do backend com Maven
      run: mvn -f back-end/api-learn-link/pom.xml clean package

    - name: Gerar artefato Github com o .jar gerado
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: back-end/api-learn-link/target/*.jar

    - name: Gerar artefato Github com os scripts do backend
      uses: actions/upload-artifact@v4
      with:
        name: backend-scripts
        path: .github/scripts/*.sh

    # Build do Frontend
    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Instalar dependências do frontend
      run: npm install --prefix front-end

    - name: Build do frontend
      run: npm run build --prefix front-end

    - name: Gerar artefato Github com os arquivos do build do frontend
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: front-end/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Deploy do Backend
    - name: Recuperar artefato do backend
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ./backend/

    - name: Recuperar scripts do backend
      uses: actions/download-artifact@v4
      with:
        name: backend-scripts
        path: ./backend-scripts/

    - name: Criar arquivo .pem para o backend
      id: setup-key-backend
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "$DEPLOY_KEY" >> $HOME/${{ secrets.NOME_ARQUIVO_PEM }}
        chmod 400 $HOME/${{ secrets.NOME_ARQUIVO_PEM }}

    - name: Enviar o JAR do backend para a EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ubuntu
        key: ${{ secrets.DEPLOY_KEY }}
        source: "./backend/*.jar"
        target: "/home/ubuntu/deploy-api/"

    - name: Enviar scripts do backend para a EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ubuntu
        key: ${{ secrets.DEPLOY_KEY }}
        source: "./backend-scripts/*.sh"
        target: "/home/ubuntu/deploy-api/"

    - name: Conectar via SSH à EC2 para reiniciar o backend
      run: |
        ssh -o StrictHostKeyChecking=no -i $HOME/${{ secrets.NOME_ARQUIVO_PEM }} ubuntu@${{ secrets.DEPLOY_HOST }} '
          sh /home/ubuntu/deploy-api/api-restart.sh
        '

    # Deploy do Frontend
    - name: Recuperar artefato do frontend
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./frontend/

    - name: Criar arquivo .pem para o frontend
      id: setup-key-frontend
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "$DEPLOY_KEY" >> $HOME/${{ secrets.NOME_ARQUIVO_PEM }}
        chmod 400 $HOME/${{ secrets.NOME_ARQUIVO_PEM }}

    - name: Enviar arquivos do frontend para a EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ubuntu
        key: ${{ secrets.DEPLOY_KEY }}
        source: "./frontend/*"
        target: "/var/www/html/"

    - name: Conectar via SSH à EC2 para reiniciar o servidor web
      run: |
        ssh -o StrictHostKeyChecking=no -i $HOME/${{ secrets.NOME_ARQUIVO_PEM }} ubuntu@${{ secrets.DEPLOY_HOST }} '
          sudo systemctl restart nginx
        '
